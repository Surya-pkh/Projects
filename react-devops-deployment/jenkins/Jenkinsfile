pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = "your-dockerhub-username/react-app"
        DOCKER_TAG = "${BUILD_NUMBER}"
        KUBECONFIG = credentials('kubeconfig-credential')
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }
        
        stage('Verify Pre-built App') {
            steps {
                echo 'Verifying pre-built React application...'
                dir('react-devops-deployment/app') {
                    script {
                        sh 'ls -la'
                        
                        // Check for pre-built dist folder
                        if (fileExists('dist')) {
                            echo 'Found dist folder - using pre-built React app'
                            sh 'ls -la dist/'
                            
                            // Verify essential files exist
                            sh 'find dist/ -name "*.html" -o -name "*.js" -o -name "*.css" | head -10'
                            
                            // Check if index.html exists in dist
                            if (!fileExists('dist/index.html')) {
                                error 'No index.html found in dist folder'
                            }
                        } else if (fileExists('package.json')) {
                            echo 'No dist folder found but package.json exists - building React app'
                            sh 'npm ci'
                            sh 'npm run build'
                            // Move build output to dist if build folder exists
                            sh '''
                                if [ -d "build" ]; then
                                    mv build dist
                                fi
                            '''
                        } else {
                            error 'No dist folder or package.json found - cannot proceed'
                        }
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                dir('react-devops-deployment/app') {
                    script {
                        // Create index.html in dist folder if it doesn't exist (for testing)
                        if (!fileExists('dist/index.html')) {
                            sh 'mkdir -p dist'
                            writeFile file: 'dist/index.html', text: '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>React DevOps Deployment</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            text-align: center; 
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .container { 
            max-width: 600px; 
            padding: 40px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
            border: 1px solid rgba(255, 255, 255, 0.18);
        }
        h1 { 
            color: #fff; 
            margin-bottom: 20px; 
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        p { 
            font-size: 1.2em; 
            line-height: 1.6; 
            margin-bottom: 20px;
        }
        .build-info { 
            background: rgba(0, 0, 0, 0.2); 
            padding: 20px; 
            border-radius: 5px; 
            margin-top: 30px; 
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ React DevOps Deployment</h1>
        <p>Welcome to your pre-built React application deployed via Jenkins CI/CD pipeline!</p>
        <div class="build-info">
            <p><strong>Build Number:</strong> ''' + env.BUILD_NUMBER + '''</p>
            <p><strong>Deployment Date:</strong> ''' + new Date().toString() + '''</p>
            <p><strong>Status:</strong> ‚úÖ Successfully Deployed from Dist</p>
            <p><strong>Source:</strong> Pre-built React App</p>
        </div>
        <p>üéâ Your CI/CD pipeline is working with pre-built assets!</p>
    </div>
</body>
</html>
                            '''
                        }
                        
                        // Build Docker image
                        def dockerImage = docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                        
                        // Tag as latest
                        sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest"
                    }
                }
            }
        }
        
        stage('Push to DockerHub') {
            steps {
                echo 'Pushing Docker image to DockerHub...'
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub-credentials') {
                        sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
                        sh "docker push ${DOCKER_IMAGE}:latest"
                    }
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                echo 'Deploying to Kubernetes...'
                script {
                    // Create Kubernetes deployment YAML
                    writeFile file: 'k8s-deployment.yaml', text: """
apiVersion: apps/v1
kind: Deployment
metadata:
  name: react-app
  labels:
    app: react-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: react-app
  template:
    metadata:
      labels:
        app: react-app
    spec:
      containers:
      - name: react-app
        image: ${DOCKER_IMAGE}:${DOCKER_TAG}
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: react-app-service
spec:
  selector:
    app: react-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
"""
                    
                    // Apply Kubernetes configuration
                    sh 'kubectl apply -f k8s-deployment.yaml'
                    
                    // Wait for rollout to complete
                    sh 'kubectl rollout status deployment/react-app --timeout=300s'
                }
            }
        }
        
        stage('Health Check') {
            steps {
                echo 'Performing health check...'
                script {
                    // Wait a bit for the service to be ready
                    sleep(time: 30, unit: 'SECONDS')
                    
                    // Get service details
                    sh 'kubectl get services react-app-service'
                    sh 'kubectl get pods -l app=react-app'
                    
                    // Check if pods are running
                    def podStatus = sh(
                        script: 'kubectl get pods -l app=react-app -o jsonpath="{.items[*].status.phase}"',
                        returnStdout: true
                    ).trim()
                    
                    if (podStatus.contains('Running')) {
                        echo '‚úÖ Health check passed - Application is running!'
                    } else {
                        error '‚ùå Health check failed - Application is not running properly'
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up...'
            sh 'docker system prune -f'
            cleanWs()
        }
        success {
            echo 'üéâ Pipeline completed successfully!'
            script {
                // Get service external IP (for LoadBalancer)
                try {
                    def externalIP = sh(
                        script: 'kubectl get service react-app-service -o jsonpath="{.status.loadBalancer.ingress[0].ip}"',
                        returnStdout: true
                    ).trim()
                    
                    if (externalIP && externalIP != '') {
                        echo "üåê Application is accessible at: http://${externalIP}"
                    } else {
                        echo "üåê Application deployed successfully. Check 'kubectl get services' for access details."
                    }
                } catch (Exception e) {
                    echo "‚ÑπÔ∏è  Application deployed. Use 'kubectl get services' to check access details."
                }
            }
        }
        failure {
            echo '‚ùå Pipeline failed!'
            script {
                // Show recent pod logs for debugging
                try {
                    sh 'kubectl logs -l app=react-app --tail=50'
                } catch (Exception e) {
                    echo 'Could not retrieve pod logs'
                }
            }
        }
    }
}