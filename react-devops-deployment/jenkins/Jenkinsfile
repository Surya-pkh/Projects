pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = "react-app-local"
        DOCKER_TAG = "${BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }
        
        stage('Verify Pre-built App') {
            steps {
                echo 'Verifying pre-built React application...'
                dir('react-devops-deployment/app') {
                    script {
                        sh 'ls -la'
                        
                        // Check for pre-built dist folder
                        if (fileExists('dist')) {
                            echo 'Found dist folder - using pre-built React app'
                            sh 'ls -la dist/'
                            
                            // Verify essential files exist
                            sh 'find dist/ -name "*.html" -o -name "*.js" -o -name "*.css" | head -10'
                            
                            // Check if index.html exists in dist
                            if (!fileExists('dist/index.html')) {
                                echo 'Creating basic index.html for testing...'
                                sh 'mkdir -p dist'
                                writeFile file: 'dist/index.html', text: '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>React DevOps Test</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            text-align: center; 
            margin: 0;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .container { 
            max-width: 600px; 
            padding: 40px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            backdrop-filter: blur(10px);
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ React DevOps Test</h1>
        <p>Build successful! Pipeline is working correctly.</p>
        <p><strong>Build:</strong> ''' + env.BUILD_NUMBER + '''</p>
        <p><strong>Status:</strong> ‚úÖ Container Ready</p>
    </div>
</body>
</html>
                                '''
                            }
                        } else {
                            error 'No dist folder found - cannot proceed'
                        }
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                dir('react-devops-deployment/app') {
                    script {
                        // Build Docker image
                        sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                        
                        // Tag as latest
                        sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest"
                        
                        echo "‚úÖ Docker image built successfully: ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    }
                }
            }
        }
        
        stage('Test Container') {
            steps {
                echo 'Testing Docker container...'
                script {
                    sh """
                        echo "Starting container for testing..."
                        CONTAINER_ID=\$(docker run -d -p 8091:80 ${DOCKER_IMAGE}:${DOCKER_TAG})
                        echo "Container ID: \$CONTAINER_ID"
                        
                        # Wait for container to start
                        sleep 5
                        
                        # Test health endpoint
                        echo "Testing health endpoint..."
                        curl -f http://localhost:8091/health || echo "Health endpoint not available"
                        
                        # Test main page
                        echo "Testing main page..."
                        curl -f http://localhost:8091/ || echo "Main page test failed"
                        
                        # Stop and clean up
                        docker stop \$CONTAINER_ID
                        docker rm \$CONTAINER_ID
                        
                        echo "‚úÖ Container test completed!"
                    """
                }
            }
        }
        
        stage('Create Deployment Manifest') {
            steps {
                echo 'Creating Kubernetes deployment manifest...'
                dir('react-devops-deployment/app') {
                    script {
                        writeFile file: 'k8s-deployment.yaml', text: """
apiVersion: apps/v1
kind: Deployment
metadata:
  name: react-app
  labels:
    app: react-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: react-app
  template:
    metadata:
      labels:
        app: react-app
    spec:
      containers:
      - name: react-app
        image: ${DOCKER_IMAGE}:${DOCKER_TAG}
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: react-app-service
spec:
  selector:
    app: react-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
"""
                        echo "‚úÖ Kubernetes manifest created"
                        sh 'cat k8s-deployment.yaml'
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up...'
            script {
                try {
                    sh 'docker system prune -f'
                } catch (Exception e) {
                    echo "Cleanup warning: ${e.getMessage()}"
                }
            }
            cleanWs()
        }
        success {
            echo 'üéâ Pipeline completed successfully!'
            echo "üê≥ Docker image: ${DOCKER_IMAGE}:${DOCKER_TAG}"
            echo "üìÑ Kubernetes manifest: k8s-deployment.yaml created"
            echo "üöÄ Ready for deployment!"
        }
        failure {
            echo '‚ùå Pipeline failed!'
            script {
                try {
                    sh 'docker images | grep ${DOCKER_IMAGE} || echo "No images found"'
                } catch (Exception e) {
                    echo 'Could not retrieve debug information'
                }
            }
        }
    }
}
