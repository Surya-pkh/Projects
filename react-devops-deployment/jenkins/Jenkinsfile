pipeline {
    agent any
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKERHUB_USERNAME = 'your-dockerhub-username'
        IMAGE_NAME = 'react-trend-app'
        IMAGE_TAG = "${BUILD_NUMBER}"
        KUBECONFIG_CREDENTIAL = credentials('kubeconfig')
        AWS_DEFAULT_REGION = 'us-west-2'
        NAMESPACE = 'react-app'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }
        
        stage('Build Application') {
            steps {
                echo 'Building React application...'
                dir('react-devops-deployment/app') {
                    script {
                        docker.image('node:18-alpine').inside {
                            sh '''
                                npm ci --silent
                                npm run build
                                echo "Build completed successfully"
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                dir('react-devops-deployment/app') {
                    script {
                        def image = docker.build("${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${IMAGE_TAG}")
                        docker.build("${DOCKERHUB_USERNAME}/${IMAGE_NAME}:latest")
                    }
                }
            }
        }
        
        stage('Push to DockerHub') {
            steps {
                echo 'Pushing to DockerHub...'
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub-credentials') {
                        def image = docker.image("${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${IMAGE_TAG}")
                        image.push()
                        image.push("latest")
                    }
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                echo 'Deploying to Kubernetes...'
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                    sh '''
                        # Update image in deployment
                        sed -i "s|DOCKERHUB_USERNAME|${DOCKERHUB_USERNAME}|g" react-devops-deployment/kubernetes/deployment.yaml
                        
                        # Apply Kubernetes manifests
                        kubectl apply -f react-devops-deployment/kubernetes/namespace.yaml
                        kubectl apply -f react-devops-deployment/kubernetes/configmap.yaml
                        kubectl apply -f react-devops-deployment/kubernetes/deployment.yaml
                        kubectl apply -f react-devops-deployment/kubernetes/service.yaml
                        
                        # Wait for rollout
                        kubectl rollout status deployment/react-app-deployment -n ${NAMESPACE} --timeout=300s
                        
                        # Get service status
                        kubectl get service react-app-service -n ${NAMESPACE}
                    '''
                }
            }
        }
        
        stage('Health Check') {
            steps {
                echo 'Running health checks...'
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                    sh '''
                        kubectl wait --for=condition=ready pod -l app=react-app -n ${NAMESPACE} --timeout=300s
                        kubectl get deployment react-app-deployment -n ${NAMESPACE}
                        kubectl get pods -n ${NAMESPACE}
                        echo "Health check completed"
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up...'
            sh 'docker system prune -f || true'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
