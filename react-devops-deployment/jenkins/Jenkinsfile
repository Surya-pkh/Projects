pipeline {
    agent any
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        KUBECONFIG_CREDENTIAL = credentials('kubeconfig')
        IMAGE_NAME = 'your-dockerhub-username/react-app'
        IMAGE_TAG = "${BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }
        
        stage('Verify Pre-built App') {
            steps {
                echo 'Verifying pre-built React application...'
                dir('react-devops-deployment/app') {
                    script {
                        // Check if it's a pre-built app
                        sh 'ls -la'
                        sh 'find . -name "*.html" -o -name "*.js" -o -name "*.css" | head -10'
                        
                        // If there's a package.json, check if it has serve script
                        sh '''
                            if [ -f "package.json" ]; then
                                echo "Found package.json, checking for serve script..."
                                cat package.json
                            else
                                echo "No package.json found - assuming static files only"
                            fi
                        '''
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                dir('react-devops-deployment/app') {
                    script {
                        // Create Dockerfile for pre-built React app
                        writeFile file: 'Dockerfile', text: '''
# Use Nginx to serve the pre-built React app
FROM nginx:alpine

# Copy the pre-built React app to Nginx html directory
COPY . /usr/share/nginx/html

# Copy custom nginx config if exists, otherwise use default
COPY nginx.conf /etc/nginx/nginx.conf 2>/dev/null || echo "Using default nginx config"

# Expose port 80
EXPOSE 80

# Start Nginx
CMD ["nginx", "-g", "daemon off;"]
'''
                        
                        // Create basic nginx config
                        writeFile file: 'nginx.conf', text: '''
events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    sendfile        on;
    keepalive_timeout  65;
    
    server {
        listen       80;
        server_name  localhost;
        
        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            try_files $uri $uri/ /index.html;
        }
        
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }
}
'''
                        
                        // Build Docker image
                        def image = docker.build("${IMAGE_NAME}:${IMAGE_TAG}")
                        
                        // Also tag as latest
                        sh "docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest"
                    }
                }
            }
        }
        
        stage('Push to DockerHub') {
            steps {
                echo 'Pushing Docker image to DockerHub...'
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials') {
                        sh "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
                        sh "docker push ${IMAGE_NAME}:latest"
                    }
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                echo 'Deploying to Kubernetes...'
                script {
                    // Create Kubernetes deployment YAML
                    writeFile file: 'k8s-deployment.yaml', text: """
apiVersion: apps/v1
kind: Deployment
metadata:
  name: react-app
  labels:
    app: react-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: react-app
  template:
    metadata:
      labels:
        app: react-app
    spec:
      containers:
      - name: react-app
        image: ${IMAGE_NAME}:${IMAGE_TAG}
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
---
apiVersion: v1
kind: Service
metadata:
  name: react-app-service
spec:
  selector:
    app: react-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
"""
                    
                    // Apply to Kubernetes
                    withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                        sh 'kubectl apply -f k8s-deployment.yaml'
                        sh 'kubectl rollout status deployment/react-app'
                    }
                }
            }
        }
        
        stage('Health Check') {
            steps {
                echo 'Performing health check...'
                script {
                    withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                        // Wait for deployment to be ready
                        sh 'kubectl wait --for=condition=available --timeout=300s deployment/react-app'
                        
                        // Get service info
                        sh 'kubectl get services react-app-service'
                        sh 'kubectl get pods -l app=react-app'
                        
                        echo 'Health check completed successfully!'
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up...'
            sh 'docker system prune -f'
            cleanWs()
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
